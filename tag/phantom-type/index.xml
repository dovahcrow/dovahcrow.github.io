<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>phantom type | Ya!</title><link>https://wooya.me/tag/phantom-type/</link><atom:link href="https://wooya.me/tag/phantom-type/index.xml" rel="self" type="application/rss+xml"/><description>phantom type</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2022 Weiyuan</copyright><lastBuildDate>Mon, 02 Nov 2015 10:36:23 +0800</lastBuildDate><image><url>https://wooya.me/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url><title>phantom type</title><link>https://wooya.me/tag/phantom-type/</link></image><item><title>Talk About Phantom Type</title><link>https://wooya.me/post/rust-phantom-type/</link><pubDate>Mon, 02 Nov 2015 10:36:23 +0800</pubDate><guid>https://wooya.me/post/rust-phantom-type/</guid><description>&lt;p>在具有高级类型系统的语言里面，有一种类型标记的用法叫phantom type,
比如&lt;a href="http://www.haskell.org/haskellwiki/Phantom_type" target="_blank" rel="noopener">Haskell语言&lt;/a>。这种用法有个很有意思用途：用来做编译时的类型检查，并且对于编译后的代码来说，完全没有任何的副作用。&lt;/p>
&lt;p>举个例子，在做几何运算的时候，我们会碰到运算时变量单位的问题。&lt;/p>
&lt;pre>&lt;code class="language-rust">#[deriving(Show)]
struct Length&amp;lt;Num&amp;gt;(Num);
type Meter = f64;
type Inch = f64;
let a: Length&amp;lt;Meter&amp;gt; = Length(5.0 as Meter);
let b: Length&amp;lt;Inch&amp;gt; = Length(7.0 as Inch);
impl&amp;lt;Num&amp;gt; Add&amp;lt;Length&amp;lt;Num&amp;gt;,Length&amp;lt;Num&amp;gt;&amp;gt; for Length&amp;lt;Num&amp;gt; where Num: Add&amp;lt;Num,Num&amp;gt; {
fn add(self, rhs: Length&amp;lt;Num&amp;gt;) -&amp;gt; Length&amp;lt;Num&amp;gt; {
Length(self.0 + rhs.0)
}
}
println!(&amp;quot;{}&amp;quot;, a + b);
&lt;/code>&lt;/pre>
&lt;p>在上面的代码中，我们有一个很明显的bug,单位为米的a竟然和单位为英寸的b进行了相加。要是在业务逻辑中出现这么一茬，肯定很难debug，因为从语法上来讲，完全没有问题啊！&lt;/p>
&lt;p>现在我们来引入一种类型系统的trick，叫做phantom type。&lt;/p>
&lt;pre>&lt;code class="language-rust">mod unit {
#[deriving(Show)]
enum Meter {}
#[deriving(Show)]
enum Inch {}
}
#[deriving(Show)]
struct Length&amp;lt;Unit,Num&amp;gt;(Num);
let a: Length&amp;lt;unit::Meter,f64&amp;gt; = Length(5.0);
let b: Length&amp;lt;unit::Inch,f64&amp;gt; = Length(7.0);
impl&amp;lt;Unit,Num&amp;gt; Add&amp;lt;Length&amp;lt;Unit,Num&amp;gt;,Length&amp;lt;Unit,Num&amp;gt;&amp;gt; for Length&amp;lt;Unit,Num&amp;gt; where Num: Add&amp;lt;Num,Num&amp;gt; {
fn add(self, rhs: Length&amp;lt;Unit,Num&amp;gt;) -&amp;gt; Length&amp;lt;Unit,Num&amp;gt; {
Length(self.0 + rhs.0)
}
}
println!(&amp;quot;{}&amp;quot;, a + b);
&lt;/code>&lt;/pre>
&lt;p>为了打印方便，加了一些&lt;code>#[deriving(Show)]&lt;/code>。 我们给Length类型加上了一个&lt;code>Unit &lt;/code>的类型标记。但是，Unit却没有出现在任何有值的地方，它仅仅是作为了一个类型标记存在着。所以，我想这也是为什么它叫&lt;code>phantom type&lt;/code>的原因吧。&lt;/p>
&lt;p>编译上面那段的代码，编译器会给你报错：&lt;/p>
&lt;pre>&lt;code class="language-rust">error: mismatched types: expected `main::Length&amp;lt;main::unit::Meter, f64&amp;gt;`, found `main::Length&amp;lt;main::unit::Inch,
f64&amp;gt;` (expected enum main::unit::Meter,found enum main::unit::Inch)
&lt;/code>&lt;/pre>
&lt;p>编译器说： a是&lt;code>Length&amp;lt;Meter,f64&amp;gt;&lt;/code>, b是&lt;code>&amp;lt;Inch，f64&amp;gt;&lt;/code>,它们类型不相容。&lt;/p>
&lt;p>仅仅通过增加一个额外的类型标记，我们就实现了让编译器自动给我们检查单位的方法，而且这种&lt;code>phantom type&lt;/code>的小trick，不会带来任何的运行时负担。在编译完毕后，它们就被一并的擦除了。&lt;/p>
&lt;p>其实这是一种对现实中单位制的模拟。平时我们写的时候一般写
1m，2mm之类。其实当我们写下了1m这个数字的时候，其实着我们写下了两个东西，作为数字的1和作为单位的m。单独拿出来，对于数字1来讲，他没有任何的意义。可以随便对他加上其它的数字；对于m来说，它仅仅是个单位，同样也没有意义。但是1m结合起来，m就为1赋予了class信息，改变了它的运算规则。&lt;code>phantom type&lt;/code>在此，就起到了这个量纲作用。&lt;/p>
&lt;p>除了用来作为数字的单位以外，还有一个比较好用的地方是作为用户输入安全性的标记（这和rust着重安全是遥相呼应啊）。
众所周知，web安全有很大一部分问题，是因为没有对用户输入做检查。一个安全的系统应该对于所有的用户输入采取不信任的态度，应该由代码对其进行检查。
但是在开发的时候，可能由于程序员水平问题，或者一时疏忽等原因，往往会忘记检查。这就为系统埋下了很大的隐患。
利用&lt;code>phantom type&lt;/code>我们可以为所有的string打上tag，让编译器来替我们进行检查。&lt;/p>
&lt;pre>&lt;code class="language-rust">enum Trusted {}
enum UnTrusted {}
struct UserInput&amp;lt;T&amp;gt;(String);
let a: UserInput&amp;lt;Trusted&amp;gt;(&amp;quot;safe&amp;quot;.to_string());
let b: UserInput&amp;lt;UnTrusted&amp;gt;(&amp;quot;SQL Injectiong is here!!!&amp;quot;.to_string());
insert_into_database(a);
insert_into_database(b); // 编译通不过
&lt;/code>&lt;/pre>
&lt;p>假定我们的&lt;code>insert_into_database&lt;/code>接受一个&lt;code>UserInput&amp;lt;Trusted&amp;gt;&lt;/code>作为输入。那么那个b，我们是无论如何也无法存入数据库的，必须要我们进行显式的检查，将其转换为UserInput&lt;Trusted>,否则编译必定报错。这样系统的安全性就大大的加强了。&lt;/p></description></item></channel></rss>