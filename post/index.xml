<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts | Ya!</title><link>https://wooya.me/post/</link><atom:link href="https://wooya.me/post/index.xml" rel="self" type="application/rss+xml"/><description>Posts</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2022 Weiyuan</copyright><lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate><image><url>https://wooya.me/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url><title>Posts</title><link>https://wooya.me/post/</link></image><item><title>Implementing Nextaction In Todoist</title><link>https://wooya.me/post/todoist-nextaction/</link><pubDate>Thu, 06 Apr 2017 17:41:28 +0800</pubDate><guid>https://wooya.me/post/todoist-nextaction/</guid><description>&lt;p>If you are a fan of MLO or Omnifocus, I bet you will really miss the nextaction feature if you migrate to Todoist. With nextaction, one can keep really focus on things he should do, which is really nice. But since Todoist hasn&amp;rsquo;t provided this feature(maybe they don&amp;rsquo;t want this forever), we need to exploit the todoist api to achieve our goal.&lt;/p>
&lt;p>Inspired by &lt;a href="https://github.com/akramer/NextAction" target="_blank" rel="noopener">here&lt;/a>, implementing by a polling server is a trivial but decent way. Rather than using python, I chose to write it in Rust. The rationale behind is that it should be a simple application with as less as possible dependencies, not python with lots of redundant libraries. And you can see after that the compiled docker image is only 18M which is much easier to distribute (Actually I&amp;rsquo;m considering a &amp;ldquo;nextaction as a service&amp;rdquo;, a.k.a. NaaS).&lt;/p>
&lt;h1 id="usage">Usage&lt;/h1>
&lt;h2 id="simple-run">Simple run&lt;/h2>
&lt;p>You should set environment variable &lt;code>NXTT_token&lt;/code> to your Todoist token.&lt;/p>
&lt;p>To build the application, &lt;a href="%60https;//rustup.rs%60">rust&lt;/a> is needed.
Run: &lt;code>git clone &amp;amp;&amp;amp; cargo run --release&lt;/code>&lt;/p>
&lt;h2 id="docker-image">Docker Image&lt;/h2>
&lt;p>A docker image is also available. Run it by &lt;code>docker run -it -e NXTT_token=&amp;lt;your Todoist token&amp;gt; wooya/nextaction&lt;/code>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;blockquote>
&lt;p>copy-pasted from the README&lt;/p>
&lt;/blockquote>
&lt;h2 id="nextaction">@nextaction&lt;/h2>
&lt;p>Nextaction will auto tag current &lt;code>nextaction&lt;/code> task with &lt;code>@nextaction&lt;/code>. It also supports parallel task (with &amp;lsquo;-&amp;rsquo; append)
and sequential task (with &amp;lsquo;:&amp;rsquo; append).&lt;/p>
&lt;p>e.g.&lt;/p>
&lt;pre>&lt;code>|-taskA:
|-taskB // This task will be tagged @nextaction
|-taskC:
|-taskD
&lt;/code>&lt;/pre>
&lt;p>after you complete taskB, it will become&lt;/p>
&lt;pre>&lt;code>|-taskA:
|-taskC:
|-taskD // This task will be tagged @nextaction
&lt;/code>&lt;/pre>
&lt;p>And for parallel tasks:&lt;/p>
&lt;pre>&lt;code>|-taskA-
|-taskB // This task will be tagged @nextaction
|-taskC // This task will also be tagged @nextaction
&lt;/code>&lt;/pre>
&lt;p>So that you can add a filter on @nextaction to make you focused.&lt;/p>
&lt;p>Parallel tasks and sequential tasks can corporate with each other seamlessly:&lt;/p>
&lt;pre>&lt;code>|-taskA-
|-taskB:
| |-taskC // This task will be tagged @nextaction
| |-taskD
|-taskE // This task will be tagged @nextaction
&lt;/code>&lt;/pre>
&lt;h2 id="someday">@someday&lt;/h2>
&lt;p>Nextaction also supports a tag called &lt;code>@someday&lt;/code>. The logic is:
when Nextaction meets a task which should be tagged &lt;code>@nextaction&lt;/code>
but currently has tag &lt;code>@someday&lt;/code>, it won&amp;rsquo;t tag &lt;code>@nextaction&lt;/code> to that task.
So that your someday tasks won&amp;rsquo;t show up on your nextaction list.&lt;/p>
&lt;p>So, don&amp;rsquo;t hesitate to deploy a nextaction server and let&amp;rsquo;s call it a day!&lt;/p></description></item><item><title>Kindle PDF Optimization Service</title><link>https://wooya.me/post/kindle-pdf-optimization-service/</link><pubDate>Thu, 22 Dec 2016 17:36:19 +0800</pubDate><guid>https://wooya.me/post/kindle-pdf-optimization-service/</guid><description>&lt;h1 id="update">Update:&lt;/h1>
&lt;p>Due to lack of funding, I decided to move it to another service provider which brings in new restrictions to this service:&lt;/p>
&lt;ul>
&lt;li>&lt;del>Total file size for a single email may not be larger than 6 MB. So if you have multiple files to convert, please send them in separate emails&lt;/del>&lt;/li>
&lt;li>Conversion of &lt;em>Each&lt;/em> file should be finished within &amp;ndash;5&amp;ndash; 15 mins, which means your file cannot have many pages. So if you want to convert a whole book, please cut them into small batches. In principle, this service suits most for paper reading.&lt;/li>
&lt;/ul>
&lt;p>Update, take 2: I integrated a small hack into the service as the first feature in 2018, so there&amp;rsquo;s no restriction on file size anymore.
Update, take 3: I increased the time budget for each conversion to 15 mins and 1G memory.&lt;/p>
&lt;h1 id="what-it-is">What it is?&lt;/h1>
&lt;p>I&amp;rsquo;m fond of reading academic things on my Kindle, however, most academic papers are not
designed to be read on a 6-inch size screen, let alone those with two columns format.&lt;/p>
&lt;p>I took some time writing a service and now things go easy. You can just send your pdf
to &lt;code>kindle-deliver@wooya.me&lt;/code> with your &lt;code>Send-To-Kindle&lt;/code> address
as the subject, then a cropped version of your book will be pushed to your Kindle automatically.&lt;/p>
&lt;p>Basically, this service will crop your book into a Kindle readable format
and send it pretending it is you sending the book by mocking the sender address.&lt;/p>
&lt;p>So, notice that the email used to send PDFs to &lt;code>kindle-deliver@wooya.me&lt;/code>
should be in your &lt;a href="https://www.amazon.com/gp/sendtokindle/email" target="_blank" rel="noopener">Approved Personal Document E-mail List&lt;/a>.&lt;/p>
&lt;h1 id="page-selection-if-file-too-large">Page selection if file too large&lt;/h1>
&lt;p>One thing is that if the book contains too many pages, the mailer may reject sending the attachment for its huge size,
but you can enter a subset of pages (e.g. &lt;code>1-9,13,209-&lt;/code>) in the email content to shrink the result file size.
The input format is:&lt;/p>
&lt;ul>
&lt;li>Single Page - e.g. &lt;code>1&lt;/code>&lt;/li>
&lt;li>Some Pages - e.g. &lt;code>5-9&lt;/code>&lt;/li>
&lt;li>Page Since - e.g. &lt;code>10-&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>And use comma &lt;code>,&lt;/code> to combine the page selections, e.g. &lt;code>1,5-9,10-&lt;/code>, with a prepending &lt;code># &lt;/code> to indicate it&amp;rsquo;s a page selection command. There should not be any spaces inside the page selection.&lt;/p>
&lt;h1 id="additional-params">Additional params&lt;/h1>
&lt;p>Currently, this service supports params including page selection and raw k2pdfopt params by writing them in mail body. Only one
PDF file should be attached if params are used.&lt;/p>
&lt;p>Detailed grammar:&lt;/p>
&lt;ul>
&lt;li>Prepending &lt;code>#&lt;/code> with a &lt;code>space&lt;/code> to do page selection, e.g. &lt;code># 1,5-9,10-&lt;/code> (from the above example).&lt;/li>
&lt;li>Prepending &lt;code>@&lt;/code> with a &lt;code>space&lt;/code> to do pass raw params to k2pdfopt, e.g. &lt;code>@ -p 1,5-9,10-&lt;/code> is same as &lt;code># 1,5-9,10-&lt;/code> if you know the param &lt;code>-p&lt;/code> is page selection for &lt;code>k2pdfopt&lt;/code>, resulting in &lt;code>k2pdfopt -p 1,5-9,10- -o &amp;lt;filename&amp;gt;_converted.pdf &amp;lt;filename&amp;gt;&lt;/code> be called (if you know how to use &lt;code>k2pdfopt&lt;/code>, then you will definetely understand this. Otherwise, &lt;code># &lt;/code> is enough for you).&lt;/li>
&lt;/ul>
&lt;h1 id="caveat">Caveat&lt;/h1>
&lt;p>Be careful, you should not send classified documents to this address! Although I will delete them in place on the server, the document will exist in
Gmail trash for several days until Google purge the trash bin automatically. And if something goes wrong, I may replay attachments in the trash bin to debug.
So please &lt;strong>DON&amp;rsquo;T SEND CLASSIFIED&lt;/strong> or &lt;strong>PRIVATE DOCUMENTS&lt;/strong> to me in order to keep me away from legal issues.&lt;/p>
&lt;h1 id="thanks">Thanks&lt;/h1>
&lt;p>Great thanks to &lt;a href="http://www.willus.com/" target="_blank" rel="noopener">willus&lt;/a> who provided
&lt;a href="http://www.willus.com/k2pdfopt/" target="_blank" rel="noopener">this excellent tool&lt;/a> to produce
the kindle readable version of pdf.&lt;/p>
&lt;center>
&lt;hr/>
&lt;p> Do you like the service? &lt;/p>
&lt;p> It costs me several bucks to maintain the server and email sending service &lt;/p>
&lt;p> I'm really &lt;strong>appreciate&lt;/strong> it if you can offer me a cup of coffee :)&lt;/p>
&lt;form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
&lt;input type="hidden" name="cmd" value="_s-xclick" />
&lt;input type="hidden" name="hosted_button_id" value="LKM2L7LDMU6ZS" />
&lt;input type="image" src="https://www.paypal.com/en_US/i/btn/btn_donate_LG.gif" border="0" name="submit" title="Offer me a coffee with Paypal :)" alt="Offer me a coffee" />
&lt;img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1" style="margin-top: 0; margin-bottom: 0;"/>
&lt;/form>
&lt;p style="margin-top: 0; margin-bottom: 0;"> -- OR -- &lt;/p>
&lt;h3 style="margin-top: 0; margin-bottom: 0;"> Bitcoin &lt;/h3>
&lt;img ng-src="https://chart.googleapis.com/chart?chs=150x150&amp;amp;cht=qr&amp;amp;chl=1DyAXYcQy4HNWu83vRho1b8b15zqKn9qd6&amp;amp;choe=UTF-8" ng-show="showqr" src="https://chart.googleapis.com/chart?chs=150x150&amp;amp;cht=qr&amp;amp;chl=1DyAXYcQy4HNWu83vRho1b8b15zqKn9qd6&amp;amp;choe=UTF-8" style="margin-top: 0; margin-bottom: 0;">
&lt;p style="margin-top: 0; margin-bottom: 0;"> 1DyAXYcQy4HNWu83vRho1b8b15zqKn9qd6 &lt;/p>
&lt;/center></description></item><item><title>Multipledispatch2</title><link>https://wooya.me/post/multipledispatch2/</link><pubDate>Fri, 13 May 2016 18:41:28 +0800</pubDate><guid>https://wooya.me/post/multipledispatch2/</guid><description>&lt;p>æ¬æè®²è¿°äºç¬èçmultipledispatch2åºçä¸äºææ¯ç»è.&lt;/p>
&lt;p>ç±äºæ¯ä»éæè¯­è¨åæ¢æçpythonä½¿ç¨è, ç¬èå¯¹pythonçå¨æç±»åéå¸¸ä¸éåº. å æ­¤å ä¹æ¯ä¸ªå°æ¹é½ä¼ä½¿ç¨multipledispatchç»ä¿æ¤ä¸ä¸.&lt;/p>
&lt;p>ç¶åç¨ä¹äºæè§æå ä¸ªä¸æ¹ä¾¿:&lt;/p>
&lt;ol>
&lt;li>&lt;code>multipledispatch&lt;/code>ä¸æ¯æå½æ°åæ°çç±»åç­¾å. &lt;code>python 3.5&lt;/code>å å¥äº&lt;code>typing&lt;/code>åº, è¡¨ç¤º&lt;code>def foo(bar: int, baz: str) -&amp;gt; list&lt;/code>è¿ç§åæ³æ¯å®æ¹æå¡ç, ç¶èmultipledispatchå´ä¸æ¯æè¿ç§åæ³.&lt;/li>
&lt;li>&lt;code>multipledispatch&lt;/code>ä¸æ¯æä¸ä¸ªç±»åæ¯å¤ä¸ªç±»åçå­ç±»åçåæ³, æ¯å¦ææ³è¡¨è¾¾&lt;code>A &amp;lt;: B &amp;amp;&amp;amp; A &amp;lt;: C&lt;/code>æ¶å°±æ è½ä¸ºåäº.&lt;/li>
&lt;/ol>
&lt;p>ç±äºç»ä½èæissueä»¥åä½èå ä¸ªææ²¡å¨é, å æ­¤å¨&lt;code>multipledispatch&lt;/code>çåºç¡ä¸, ç¬èä¿®æ¹äºä¸äºä»£ç , åå¸äºmultipledispatch2.&lt;/p>
&lt;p>ä¸»è¦æ¹å¨æ¯:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>å¢å äºå¯¹&lt;code>type annotation&lt;/code>çæ¯æ, å³:
å¯¹äºåæ¥ç&lt;/p>
&lt;pre>&lt;code class="language-python">@dispatch(int, str)
def foo(a, b):
pass
&lt;/code>&lt;/pre>
&lt;p>ç°å¨å¯ä»¥åä½:&lt;/p>
&lt;pre>&lt;code class="language-python">@dispatch
def foo(a: int, b: str):
pass
&lt;/code>&lt;/pre>
&lt;p>ç¸å¯¹æ´èªç¶äºä¸ç¹.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>å¢å äºå¯¹&lt;code>subtype of multiple types&lt;/code>çæ¯æ:&lt;/p>
&lt;pre>&lt;code class="language-python">class A: pass
class B: pass
class C(A, B): pass
@dispatch
def foo(a: [A, B]):
pass
&lt;/code>&lt;/pre>
&lt;p>å¯¹äºè°ç¨&lt;code>foo(x)&lt;/code>, å½ä¸ä»å½å¥å&lt;code>x&lt;/code>åæ¶æ¯&lt;code>A&lt;/code>å&lt;code>B&lt;/code>çå­ç±»æ¶, å¯¹fooçè°ç¨æä¼æç«. å¨ä¸ä¾ä¸­åªæ&lt;code>foo(C())&lt;/code>æ¯æç«ç.&lt;/p>
&lt;p>è¿ä¸ªæ°ç¹æ§å¯¹äºååºçäººæ¥è¯´ååæ¹ä¾¿, æ¯å¦å½ä½ æ³è¦ä½¿ç¨&lt;code>trait&lt;/code>æ¥å&lt;code>mixin&lt;/code>çæ¶å, userså¯è½ä¼æ¿ä½ ç&lt;code>trait&lt;/code>æ··ååºå¾å¤&lt;code>subtypes&lt;/code>. å¦æä½ æ³è¦æä¾ä¸äºå½æ°æ¥æä½è¿äº&lt;code>subtypes&lt;/code>, æ¯å¦æä¸ä¸ªå½æ°å½åæ°&lt;code>mixin&lt;/code>äº&lt;code>class A&lt;/code>æ¶äº§çbehavior1, &lt;code>mixin&lt;/code>äº&lt;code>class B&lt;/code>æ¶äº§çbehavior2, åæ¶&lt;code>mixin&lt;/code>äº&lt;code>class A&lt;/code>å&lt;code>class B&lt;/code>æ¶, äº§çbehavior3. å¨è¿ç§æåµä¸, ä½¿ç¨åæç&lt;code>multipledispatch&lt;/code>æ¯ä¸å¯è½ç.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="ææ¯ç»è">ææ¯ç»è:&lt;/h2>
&lt;p>ä¸»è¦é®é¢å¨äº&lt;code>dispatch order&lt;/code>ä¸. æ¯å¦: å¯¹äºåä¸ä¸ªå½æ°åfoo, å®æä¸¤ç§ç±»å:&lt;/p>
&lt;ol>
&lt;li>&lt;code>foo(a: A, b: B): pass&lt;/code>&lt;/li>
&lt;li>&lt;code>foo(a: C, b: B): pass&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>å¶ä¸­:&lt;/p>
&lt;pre>&lt;code class="language-python">class A: pass
class B: pass
class C(A): pass
class D(C): pass
&lt;/code>&lt;/pre>
&lt;p>å½ä½ ä¼ å¥åæ°&lt;code>(C, B)&lt;/code>çæ¶å, æ¾ç¶å¸æè°ç¨çæ¯2èä¸æ¯1, å½ä¼ å¥&lt;code>(D, B)&lt;/code>çæ¶å, æ¾ç¶ä¹å¸æè°ç¨2èä¸æ¯1.åªæå½ä¼ å¥&lt;code>(A, B)&lt;/code>æ¶, æå¸æè°ç¨çæ¯1.&lt;/p>
&lt;p>ç¨å½¢è±¡çè¯æ¥è¯´: å¯¹äºå¥å&lt;code>X&lt;/code>, å¸æè¢«è°ç¨çå½æ°æ¯æ¥æ&lt;code>æå·ä½&lt;/code>çç­¾åçé£ä¸ªå½æ°.&lt;/p>
&lt;p>äºæ¯è¿å°±è¦æ±æä»¬æä¸ä¸ªæåºæ¹æ³å°&lt;code>foo&lt;/code>çææç­¾åè¿è¡æåº, è¶å·ä½çç­¾åå°½å¯è½å¨åé¢. è¿è¡ç­¾åæç´¢æ¶, åºè¯¥ä»å¤´å¼å§æ, å¹¶éçº³ç¬¬ä¸ä¸ªéåçç­¾å.&lt;/p>
&lt;p>è¿æ¯ä¸é¢é£ä¸ªä¾å­, å¦ææä»¬è½å¤äº§çä¸ä¸ªæç´¢é¡ºåº: &lt;code>[(C, B), (A, B)]&lt;/code>, é£ä¸å°±ç¬¦åè¦æ±äº?&lt;/p>
&lt;p>å¯¹äºæåº, æ¾ç¶éè¦ä¸ä¸ªæä½ç¬¦&lt;code>compare&lt;/code>è¿è¡æ¯è¾. é£ä¹å¯¹äºç­¾åç&lt;code>compare&lt;/code>è¯¥å¦ä½å®ä¹å¢? å³å¦ä½ç¡®å®ç­¾åä¸ç­¾åä¹é´è°å¤§è°å°.&lt;/p>
&lt;p>å¨è¿éæä»¬å®ä¹&lt;code>compare&lt;/code>å¦ä¸:&lt;/p>
&lt;pre>&lt;code>ä»¤ A, B ä¸º tuple of types
if A.length == b.length then
A compare B := A &amp;lt;: B (å³Aæ¯Bçå­ç±»å)
else
return not comparable
&lt;/code>&lt;/pre>
&lt;p>èå¯¹äº&lt;code>tuple of types&lt;/code>ç&lt;code>&amp;lt;:&lt;/code>å®ä¹å¦ä¸:&lt;/p>
&lt;pre>&lt;code>for zip(all a in A, all b in B):
a &amp;lt;: b
&lt;/code>&lt;/pre>
&lt;p>å³Aä¸­æ¯ä¸ä¸ªç±»åé½æ¯å¯¹åºä½ç½®ä¸Bçå­ç±»åæ¶, &lt;code>A &amp;lt;: B&lt;/code>&lt;/p>
&lt;p>è¿æ ·æä»¬å®ä¹äºç±»åç­¾åä¹é´ç&lt;code>subtyping&lt;/code>å³ç³». äºæ¯æä»¬ä½¿ç¨è¿ä¸ª&lt;code>compare&lt;/code>å³ç³»å¯¹ä¸ä¸ªå½æ°çææç­¾åè¿è¡æææåº, ç»æå°å¾å°ä¸ä¸ªåºå.&lt;/p>
&lt;p>æ³¨æè¿éä½¿ç¨æææåºèä¸æ¯å«çæåºæ¹æ³, æ¯å ä¸ºç­¾åä¹é´å¹¶ä¸æ¯è¯åºå³ç³». ä¸¤ä¸ªç­¾åä¹é´å¯è½å¶å®æ¯æ²¡æä»»ä½å¤§å°å³ç³»ç(ä¸é¢ç&lt;code>return not comparable&lt;/code>åæ¯). å æ­¤ä¸ä¸ªå½æ°çææç­¾åå¶å®ææäºå¤ä¸ª&lt;code>DAG&lt;/code>(æåæ ç¯å¾).&lt;/p>
&lt;p>æç§æææåºå¾å°çåºåæç´¢, ä¸å®è½å¤å¾å°&lt;code>æå·ä½&lt;/code>çé£ä¸ªç­¾å.&lt;/p>
&lt;h3 id="å å¥multiple-subtypesåçåå">å å¥&lt;code>multiple subtypes&lt;/code>åçåå:&lt;/h3>
&lt;p>ä¸é¢çå®ä¹å¾ä¸é, ä½æ¯æ²¡æèèä¸ç§æåµ: å¨&lt;code>tuple of types&lt;/code>ç&lt;code>&amp;lt;:&lt;/code>å®ä¹ä¸­, æä»¬ä½¿ç¨äº&lt;code>a &amp;lt;: b&lt;/code>è¿ä¸ªæ¯è¾. ç¶èå½&lt;code>multiple subtypes&lt;/code>å­å¨çæ¶å, &lt;code>a&lt;/code>å&lt;code>b&lt;/code>å¯è½æ¯ä¸ä¸ªç±»å, ä¹å¯è½æ¯ä¸ä¸ªèåç±»å&lt;code>[type, type ...]&lt;/code>. é£ä¹å¦ä½æ±&lt;code>a &amp;lt;: b&lt;/code>å¢?&lt;/p>
&lt;p>æ¯å¦, å½&lt;/p>
&lt;pre>&lt;code class="language-python">class A: pass
class B: pass
class C(A, B): pass
&lt;/code>&lt;/pre>
&lt;p>æ¶, å¦ä½è¯æ&lt;code>C &amp;lt;: [A, B]&lt;/code>å¢?&lt;/p>
&lt;p>çè³æ¯å½&lt;/p>
&lt;pre>&lt;code class="language-python">class A: pass
class B: pass
class C(A): pass
class D(B): pass
&lt;/code>&lt;/pre>
&lt;p>æ¶, å¦ä½è¯æ&lt;code>[C, D] &amp;lt;: [A, B]&lt;/code>å¢?&lt;/p>
&lt;p>æä»¬æå±ä¸ä¸&lt;code>subtyping&lt;/code>å³ç³»å³å¯:&lt;/p>
&lt;pre>&lt;code>å¯¹äºtypes a and b
def a &amp;lt;: b as
if a and b both are type then
return a &amp;lt;: b
else if a is type and b is tuple then
return if a &amp;lt;: all types in b
else if a is tuple and b is type then
return if any types in a &amp;lt;: b
else if a and b both are tuple then
return for all types in b if any types in a &amp;lt;: types in b
&lt;/code>&lt;/pre>
&lt;p>ç»è¿è¿æ ·ä¸ä¸ªè¡¥åå®ä¹ä»¥å, &lt;code>multipledispatch2&lt;/code>å°±å®ç¾æ¯æ&lt;code>multiple subtypes&lt;/code>å¦.&lt;/p></description></item><item><title>Python C3 Linearization</title><link>https://wooya.me/post/python-c3-linearization/</link><pubDate>Sat, 09 Apr 2016 17:35:01 +0800</pubDate><guid>https://wooya.me/post/python-c3-linearization/</guid><description>&lt;p>æ¬æè®²è§£äºpythonçæ¹æ³æç´¢ä¼åçº§, &lt;code>super&lt;/code>å½æ°çè°ç¨ä»¥åpythonççº¿æ§åç®æ³&lt;code>C3&lt;/code>.&lt;/p>
&lt;p>æ¨å¤©å¨æpythonå¤ç»§æ¿çæ¶åéå°ä¸ä¸ªé®é¢æ½è±¡åå¦ä¸:&lt;/p>
&lt;pre>&lt;code class="language-python">class A:
def foo(self):
print(&amp;quot;A&amp;quot;)
class B:
def foo(self):
print(&amp;quot;B&amp;quot;)
super().foo()
class C(B,A):
def foo(self):
print(&amp;quot;C&amp;quot;)
super().foo()
&lt;/code>&lt;/pre>
&lt;p>è°ç¨&lt;code>C().foo()&lt;/code>ä¼è¾åº:&lt;/p>
&lt;pre>&lt;code class="language-python">C
B
A
&lt;/code>&lt;/pre>
&lt;p>å¶ä¸­ç¬¬ä¸è¡è¾åº&lt;code>C&lt;/code>å¾å¥½çè§£, ç¬¬äºè¡&lt;code>ç±»Bçfoo&lt;/code>è¾åº&lt;code>B&lt;/code>ä»¥åè°ç¨äº&lt;code>super&lt;/code>ç&lt;code>fooæ¹æ³&lt;/code>ãä½æ¯å¦æ&lt;code>Bçfoo&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>è°ç¨äº&lt;code>B&lt;/code>ç&lt;code>super&lt;/code>, åå ä¸º&lt;code>B&lt;/code>å¹¶æ²¡æç¶ç±», æä»¥&lt;code>super().foo()&lt;/code>çè°ç¨åºè¯¥ä¼å¤±è´¥ï¼æåº&lt;code>AttributeError&lt;/code>éè¯¯ã&lt;/li>
&lt;li>è°ç¨äº&lt;code>self&lt;/code>ç&lt;code>super&lt;/code>, ç±äºæ­¤æ¶&lt;code>self&lt;/code>çç±»åæ¯&lt;code>C&lt;/code>, é£ä¹åä¼å»è°ç¨&lt;code>B&lt;/code>ç&lt;code>foo&lt;/code>å½¢ææ ééå½è°ç¨.&lt;/li>
&lt;/ol>
&lt;p>ç¶èäºå®ä¸å¹¶æ²¡æåçä»¥ä¸ä¸¤ç§æåµã&lt;code>B&lt;/code>ç&lt;code>super&lt;/code>ç«ç¶è°ç¨äº&lt;code>A&lt;/code>ç&lt;code>foo&lt;/code>.&lt;/p>
&lt;p>å¶å®ä¸ªäººè§å¾è¿éç&lt;code>super&lt;/code>æäºè¯¯å¯¼äºº, &lt;code>super&lt;/code>å¹¶ä¸ä¸å®æ¯å»å¯»æ¾ç¶ç±», å®çæææ¯: æ²¿çæ¹æ³æç´¢åºå(&lt;code>mro&lt;/code>)å¾ä¸æç´¢ä¸æ ¼ã
è¦çè§£&lt;code>mro&lt;/code>, é¦åéè¦ç¥éä»ä¹æ¯&lt;code>linearization&lt;/code>.&lt;/p>
&lt;p>&lt;code>linearization&lt;/code>ä¸è¬åºç°å¨å·æå¤ç»§æ¿çè¯­è¨ä¸­, æ¯å¦scala, pythonç­.
å ä¸ºå¤ç»§æ¿å¿ç¶ä¼å¸¦æ¥æ¹æ³å²çªç­é®é¢ä»èå¯¼è´æ¹æ³æç´¢å¤±è´¥, æä»¥å¿é¡»è§å®ä¸ä¸ªæ¹æ³æç´¢é¡ºåºé²æ­¢å²çª, çº¿æ§çä»æåºé¨å¶
å­ç±»å¼å§åä¸æç´¢æ¹æ³ç´å°æ¾å°æå¤±è´¥. è¿å°±è¦æ±æä¸æ£µç»§æ¿æ ååæä¸ä¸ªä¸ç»´ççº¿æ§ç»æ.&lt;/p>
&lt;p>å¨pythonä¸­çº¿æ§åçç®æ³æ¯ä¸ç§å«å&lt;code>C3&lt;/code>çç®æ³. æ¥èªè®ºæ&lt;a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.19.3910" target="_blank" rel="noopener">A Monotonic Superclass Linearization for Dylan&lt;/a>.&lt;/p>
&lt;p>å®çæè¿°å¦ä¸(æ¥èªwikipedia):&lt;/p>
&lt;blockquote>
&lt;p>å¯¹äºä»¥ä¸çç±»å:&lt;/p>
&lt;pre>&lt;code>&lt;/code>&lt;/pre>
&lt;/blockquote>
&lt;p>class O
class A extends O
class B extends O
class C extends O
class D extends O
class E extends O
class K1 extends A, B, C
class K2 extends D, B, E
class K3 extends D, A
class Z extends K1, K2, K3&lt;/p>
&lt;pre>&lt;code>&amp;gt; ä»ä»¬ççº¿æ§å(å³æ¹æ³æç´¢é¡ºåº)æ¯:
&amp;gt; ```
L(O) := [O] // the linearization of O is trivially the singleton list [O], because O has no parents
L(A) := [A] + merge(L(O), [O]) // the linearization of A is A plus the merge of its parents' linearizations with the list of parents...
= [A] + merge([O], [O])
= [A, O] // ...which simply prepends A to its single parent's linearization
L(B) := [B, O] // linearizations of B, C, D and E are computed similar to that of A
L(C) := [C, O]
L(D) := [D, O]
L(E) := [E, O]
L(K1) := [K1] + merge(L(A), L(B), L(C), [A, B, C]) // first, find the linearizations of K1's parents, L(A), L(B), and L(C), and merge them with the parent list [A, B, C]
= [K1] + merge([A, O], [B, O], [C, O], [A, B, C]) // class A is a good candidate for the first merge step, because it only appears as the head of the first and last lists
= [K1, A] + merge([O], [B, O], [C, O], [B, C]) // class O is not a good candidate for the next merge step, because it also appears in the tails of list 2 and 3, but...
= [K1, A, B] + merge([O], [O], [C, O], [C]) // ...class B qualified, and so does class C; class O still appears in the tail of list 3
= [K1, A, B, C] + merge([O], [O], [O]) // finally, class O is a valid candidate, which also exhausts all remaining lists
= [K1, A, B, C, O]
L(K2) := [K2] + merge(L(D), L(B), L(E), [D, B, E])
= [K2] + merge([D, O], [B, O], [E, O], [D, B, E]) // select D
= [K2, D] + merge([O], [B, O], [E, O], [B, E]) // fail O, select B
= [K2, D, B] + merge([O], [O], [E, O], [E]) // fail O, select E
= [K2, D, B, E] + merge([O], [O], [O]) // select O
= [K2, D, B, E, O]
L(K3) := [K3] + merge(L(D), L(A), [D, A])
= [K3] + merge([D, O], [A, O], [D, A]) // select D
= [K3, D] + merge([O], [A, O], [A]) // fail O, select A
= [K3, D, A] + merge([O], [O]) // select O
= [K3, D, A, O]
L(Z) := [Z] + merge(L(K1), L(K2), L(K3), [K1, K2, K3])
= [Z] + merge([K1, A, B, C, O], [K2, D, B, E, O], [K3, D, A, O], [K1, K2, K3]) // select K1
= [Z, K1] + merge([A, B, C, O], [K2, D, B, E, O], [K3, D, A, O], [K2, K3]) // fail A, select K2
= [Z, K1, K2] + merge([A, B, C, O], [D, B, E, O], [K3, D, A, O], [K3]) // fail A, fail D, select K3
= [Z, K1, K2, K3] + merge([A, B, C, O], [D, B, E, O], [D, A, O]) // fail A, select D
= [Z, K1, K2, K3, D] + merge([A, B, C, O], [B, E, O], [A, O]) // select A
= [Z, K1, K2, K3, D, A] + merge([B, C, O], [B, E, O], [O]) // select B
= [Z, K1, K2, K3, D, A, B] + merge([C, O], [E, O], [O]) // select C
= [Z, K1, K2, K3, D, A, B, C] + merge([O], [E, O], [O]) // fail O, select E
= [Z, K1, K2, K3, D, A, B, C, E] + merge([O], [O], [O]) // select O
= [Z, K1, K2, K3, D, A, B, C, E, O] // done
&lt;/code>&lt;/pre>
&lt;p>æ¯å¦è¦è°ç¨&lt;code>Z().foo()&lt;/code>, ç¶è&lt;code>D&lt;/code>å&lt;code>A&lt;/code>é½å®ä¹äº&lt;code>foo&lt;/code>è¿ä¸ªæ¹æ³, åæ ¹æ®&lt;code>Z&lt;/code>ççº¿æ§å&lt;code>L(Z) := [Z, K1, K2, K3, D, A, B, C, E, O]&lt;/code>, ç¬¬ä¸ä¸ªæç´¢å°ç&lt;code>foo&lt;/code>åºè¯¥æ¥èª&lt;code>D&lt;/code>ã&lt;/p>
&lt;p>è¿æ ·çè¯å°±å®ç¾è§£éäºä¸æç¬¬ä¸ä¸ªä¾å­ä¸­ä¸ºä»ä¹&lt;code>B&lt;/code>ç&lt;code>super().foo()&lt;/code>è°ç¨äº&lt;code>A&lt;/code>ç&lt;code>foo&lt;/code>:&lt;/p>
&lt;p>&lt;code>super()&lt;/code>å¶å®æ¯&lt;code>super(__class__, self)&lt;/code>çç®å, å®çä½ç¨æ¯å¨&lt;code>self&lt;/code>ççº¿æ§åä¸æé¤æèªå·±ä»¥åèªå·±ä¹åçç±»å.&lt;/p>
&lt;p>æ¯å¦&lt;code>B&lt;/code>ä¸­ç&lt;code>super()&lt;/code>å¶å®æ¯&lt;code>super(__class__, self)&lt;/code>å°±æ¯&lt;code>super(B, self)&lt;/code>. å¶ä¸­&lt;code>self&lt;/code>ä¸º&lt;code>C&lt;/code>.&lt;/p>
&lt;p>æ¯å¦å ä¸º&lt;code>C&lt;/code>çº¿æ§åä¸º&lt;code>L(C) := [C, B, A]&lt;/code>, &lt;code>C&lt;/code>ä¸­è°ç¨&lt;code>super&lt;/code>, å¨çº¿æ§åç»æä¸æé¤èªå·±ä»¥åä¹åçç±»åï¼åäº§çæç´¢é¡ºåº&lt;code>[B, A]&lt;/code>, æä»¥&lt;code>C&lt;/code>ä¸­&lt;code>super().foo()&lt;/code>è°ç¨çç»ææ¯è°ç¨äº&lt;code>B&lt;/code>ç&lt;code>foo&lt;/code>.&lt;/p>
&lt;p>èå¨&lt;code>B&lt;/code>ä¸­è°ç¨&lt;code>super()&lt;/code>æé¤èªå·±&lt;code>B&lt;/code>ä»¥åä¹åçç±»å&lt;code>C&lt;/code>, äº§çæç´¢é¡ºåº&lt;code>[A]&lt;/code>, æä»¥&lt;code>B&lt;/code>ä¸­&lt;code>super().foo()&lt;/code>è°ç¨çç»ææ¯è°ç¨äº&lt;code>A&lt;/code>ç&lt;code>foo&lt;/code>.&lt;/p>
&lt;p>è¿ä¸ªçº¿æ§åç»æå¯ä»¥éè¿pythonçç±»ç&lt;code>mro&lt;/code>æ¹æ³è¿è¡æ¥çã&lt;/p>
&lt;pre>&lt;code class="language-python">C.mro() == [C, B, A]
&lt;/code>&lt;/pre></description></item><item><title>Rust Compiler Plugin</title><link>https://wooya.me/post/rust-compiler-plugin/</link><pubDate>Wed, 04 Nov 2015 11:54:16 +0800</pubDate><guid>https://wooya.me/post/rust-compiler-plugin/</guid><description>&lt;p>rust æä¾äºä¸ä¸ªå¾å¼ºå¤§çç¼è¯æ¶åè½ï¼èªå®ä¹ç¼è¯å¨æä»¶ã&lt;/p>
&lt;p>éè¿åç¼è¯å¨registerä¸ä¸ªå½æ°ä½ä¸ºå¥å£ï¼å®å¯ä»¥å¨lintæ¶ææastä½ä¸ºregisterçé£ä¸ªå½æ°çä¸ä¸ªåæ°æ¥invokeãä¹å°±æ¯è¯´ï¼éè¿ç¼è¯å¨æä»¶ï¼æä»¬å¯ä»¥åå¾å¤å¼ºï¼weiï¼å¤§ï¼suoï¼çäºæã&lt;/p>
&lt;ul>
&lt;li>ä¾å­1ï¼&lt;a href="https://github.com/brson/rust-chamber" target="_blank" rel="noopener">rust-chamber&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>chamberæ¯ä¸ä¸ªè¯­è¨çº§å«çsandbox(å¶å®æ¯ä¸ä¸ªrustcçåè£)ï¼å¯ä»¥é²æ­¢ä½ çè¯­è¨ä¸­åºç°ä¸å®å¨çcodeãç®åå®çåè½å¾ç®åï¼ä¸æ¦åç°ä½ çcodeéé¢æä½¿ç¨äºunsafeï¼æèå¼å¯äºç¼è¯å¨feature(#![feature()]),
æèä½¿ç¨äºä¸å®å¨çcrateï¼æ¯å¦intrinsicï¼ç¼è¯å°±ä¼éä¸è¿ãæä¹å®ç°çå¢ï¼å¶å®å¾ç®åãä¸é¢è´´ä¸æ ¸å¿ä»£ç ï¼&lt;/p>
&lt;!--more-->
&lt;pre>&lt;code class="language-rust">fn check_expr(&amp;amp;mut self, ctx: &amp;amp;Context, e: &amp;amp;ast::Expr) {
match e.node {
// Don't warn about generated blocks, that'll just pollute the output.
ast::ExprBlock(ref blk) if blk.rules == ast::UnsafeBlock(ast::UserProvided) =&amp;gt; {
ctx.span_lint(CH_UNSAFE_BLOCK, e.span, &amp;quot;chamber: `unsafe` block&amp;quot;);
}
_ =&amp;gt; ()
}
}
&lt;/code>&lt;/pre>
&lt;p>contextæ¯ç¨æ¥æ§å¶ç¼è¯å¨è¡ä¸ºçãeæ¯ä¼ å¥çexpressionçastè¡¨ç°å½¢å¼ãcheck_exprçä½ç¨å°±æ¯å¯¹æ¯ä¸ªä¼ å¥çexpressionè¿è¡å¤æ­ï¼å¦ææ¯unsafe
blockï¼å°±æ¥éã&lt;/p>
&lt;ul>
&lt;li>ä¾å­2ï¼&lt;a href="https://github.com/huonw/spellck" target="_blank" rel="noopener">spellck&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>è¿æ¯ä¸ä¸ªåºäºå­å¸çæ¼åæ£æ¥æä»¶ãéè¿å­å¸ï¼å¯ä»¥å°ä»£ç ä¸­çåè¯æ¼åéè¯¯å¨ç¼è¯å¨è¿è¡æç¤ºãéº»éº»åä¹ä¸ç¨æå¿æå¨ä»£ç éé¢æéå«å­å¦ï¼&lt;/p>
&lt;ul>
&lt;li>ä¾å­3ï¼&lt;a href="http://static.rust-lang.org/doc/master/regex/index.html" target="_blank" rel="noopener">regex&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ééçº§æä»¶ï¼rustå®æ¹æ­£åè¡¨è¾¾å¼åºãä»ä¹ï¼æ­£åè¡¨è¾¾å¼åæä»¶æä»ä¹å³ç³»ï¼
è¿éè¯´çæ¯rustçregexï¼å®ãä¼æå¨ç¥ï¼æ­£åè¡¨è¾¾å¼éè¦è¿è¡ç¼è¯ãæ¯å¦pythonçre.compileï¼goçregexp.Compileç­ç­ãæ­£åè¡¨è¾¾å¼éè¦å¨è¿è¡æ¶ï¼å°ä¸ä¸ªæ­£åè¡¨è¾¾å¼å­ç¬¦ä¸²ç¼è¯ææ­£åè¡¨è¾¾å¼èææºä¸çæä»¤ãæä»¥æ­£åè¡¨è¾¾å¼å¶å®æ¯ä¸ä¸ªååµå¨è¯­è¨åé¨çèææºè¯­è¨ã
æ¢ç¶æ­£åè¡¨è¾¾å¼å¨è¿è¡æ¶æè½å¤è¿è¡ç¼è¯ï¼å¹¶ä¸åªæ¯ç¼è¯æèææºæä»¤ï¼é£ä¹å®çæçå¿ç¶ä¼æ¯åçä»£ç ä½å¾å¤ãé£ä¹æä»¬è½ä¸è½æè¿ä¸ªè¿ç¨æåå°ç¼è¯æ¶å¢ï¼æ­£åè¡¨è¾¾å¼è§åæ¯éè¿å­ç¬¦ä¸²çå½¢å¼æ¥ä¹¦åçï¼å¨ç¼è¯æ¶æ æ³ç¡®å®å®çåå®¹ï¼å­ç¬¦ä¸²æ¯å¯åçï¼ãæä»¥å¨ä¸è¬çè¯­è¨ä¸­ç¡®å®åä¸å°ç¼è¯æ¶å¤çæ­£åè¡¨è¾¾å¼ãä½æ¯éè¿rustçç¼è¯å¨æä»¶ï¼æä»¬å¯ä»¥å®ç°å¯¹å¸¸éå­ç¬¦ä¸²è¡¨è¾¾å¼è¿è¡ç¼è¯æ¶çæ­£åè¡¨è¾¾å¼ç¼è¯ã
regexæä»¶å¨ç¼è¯æ¶ä¼æç¸åºçæ­£åè¡¨è¾¾å¼ç¼è¯ærustä»£ç ï¼æä»¥å¨è¿è¡æ¶å®å¨æ²¡æç¨å°æ­£åçèææºåæä»¤ãå æ­¤æ§è¡éåº¦éå¸¸å¿«ãä½å¯ä¸çç¼ºç¹å°±æ¯å¦æçæå¤ªå¤çæ­£åè¡¨è¾¾å¼ï¼é£ä¹ç¼è¯åºæ¥çäºè¿å¶æä»¶ä¼åå¾éå¸¸å¤§ãï¼æ¯ç«æ¯å§æ­£åè¡¨è¾¾å¼å±å¼æäºå¤§éçrustä»£ç ãï¼&lt;/p>
&lt;p>================================================================&lt;/p>
&lt;p>ä»ç»å°æ­¤ä¸ºæ­¢ï¼ä¸é¢æ¯æç¨ã
é¦åï¼ä½ éè¦å¼å¥ä¸ä¸ªç¼è¯å¨ç¹æ§ï¼ &lt;code>plugin_registrar&lt;/code>
å¨ä»£ç å¼å¤´å ä¸
&lt;code>#![feature(phase, plugin_registrar)]&lt;/code>
ä½¿ç¨phaseç¹æ§æ¯å ä¸ºæä»¬éè¦ä¸äºå¨rustcéé¢çå®æ¥å¸®å¿ãå¯ä»¥çå»ä¸äºä»£ç ã&lt;/p>
&lt;pre>&lt;code>#[phase(plugin, link)] // Load rustc as a plugin to get lint macros
extern crate rustc;
extern crate syntax;
use rustc::lint::{Context, LintPass, LintArray};
use rustc::plugin::Registry;
use syntax::ast;
&lt;/code>&lt;/pre>
&lt;p>å¼å¥ä¸äºcrateã
phaseæ¯ä¸ä¸ªç¼è¯å¨ç¹æ§ãå¶ä¸­pluginçæææ¯æcrateå½ä½æä»¶æå¥å°å½åä»£ç ï¼ä¸ºäºå¼å¥å¶ä¸­çmacroãå ä¸ºmacroä¸è½åä¼ ç»åéé£æ ·éç¨useæ¥å¼å¥ï¼ï¼linkçæææ¯æè¯¥crateè¿æ¥å°æ­¤æä»¶ï¼crateé»è®¤å¶å®æä¸ä¸ªlinkçfeatureï¼ã
æ¥ä¸æ¥æ¯å»ºç«ä¸ä¸ªlintçå±æ§ï¼&lt;/p>
&lt;pre>&lt;code>pub static mylint: &amp;amp;'static rustc::lint::Lint = &amp;amp;lint_initializer!(mylint, Deny, &amp;quot;abrakadabra&amp;quot;);
&lt;/code>&lt;/pre>
&lt;p>æä»¬æå®èµ·åå­å«åmylintãé»è®¤çº§å«æ¯Deny,
å¹¶ä¸æå®ç»å®å°äºmylintè¿ä¸ªstaticåéä¸ï¼éè¦æ³¨æçæ¯ï¼Lintåéå¿é¡»æ¯staticçï¼ãæè¿°éä¾¿åäºç¹ã
å¶ä¸­ï¼lintççº§å«æåä¸ªï¼åå«æ¯Allow,Warn,Deny,Forbid.å¶ä¸­ForbidåDenyçåºå«å¨äºï¼å¦ææ¯Denyï¼é£ä¹å¨æºä»£ç éé¢ï¼ä½¿ç¨èå¯ä»¥éè¿#[allow(myliny)],#[warn(mylint)]è¿è¡lintçº§å«æ´æ¢ãæ¯å¦ä»ç¦æ­¢ä¸ä¸ªç¹æ§è½¬åä¸ºåªæ¯è­¦åï¼P.S.
é£å°±æ²¡ç¨å¦ï¼ç¨åºåä»æ¥ä¸çè­¦åï¼ãä½æ¯å¦æè®¾ç½®ä¸ºForbidçº§å«ï¼é£ä¹ç¨æ·å°±æ è®ºå¦ä½ä¹æ²¡åæ³æ¹åä½ çlintçº§å«äºãæ¯å¦ä¸é¢çä¾å­ï¼chamberéé¢ï¼ä½èå°±ä½¿ç¨äºForbidçº§å«ã
ç¶åæä»¬æ°å»ºä¸ä¸ªLintPassObject;&lt;/p>
&lt;pre>&lt;code>struct MyLintPass1;
&lt;/code>&lt;/pre>
&lt;p>è¦æä¸ºä¸ä¸ªLintPassObjectï¼è¿éè¦ä¸ä¸ªTraitçå¸®å©ã&lt;/p>
&lt;pre>&lt;code>impl LintPass for MyLintPass1 {
fn get_lints(&amp;amp;self) -&amp;gt; LintArray {
lint_array!(mylint)
}
}
&lt;/code>&lt;/pre>
&lt;p>æä»¬éè¦ä¸ºæä»¬çLintPassObjectå®ç°LintPassè¿ä¸ªTraitã
LintPassè¿ä¸ªTraitæå¾å¤æ¹æ³ï¼ä½æ¯æä»¬åªè¦å®ç°get_lintè¿ä¸ä¸ªå°±å¯ä»¥äºã&lt;code>get_lint&lt;/code>è¿ä¸ªæ¹æ³çå«ä¹å°±æ¯ææä»¬åé¢å»ºç«çé£ä¸ª&lt;code>mylint&lt;/code>è¿ä¸ª&lt;code>lint&lt;/code>åæä»¬ç&lt;code>LintPassObject&lt;/code>å³èèµ·æ¥ã&lt;code>lint_array&lt;/code>è¿ä¸ªå®çä½ç¨å°±æ¯çæä¸ä¸ª&lt;code>static&lt;/code>ç&lt;code>lint array&lt;/code>ã
ç¶åï¼æåä¸ä»¶äºï¼å°±æ¯ææä»¬ç&lt;code>LintPassObject&lt;/code>æ³¨åè¿ç¼è¯å¨ã&lt;/p>
&lt;pre>&lt;code>#[plugin_registrar]
pub fn plugin_registrar(reg: &amp;amp;mut Registry) {
reg.register_lint_pass(box MyLintPass1);
}
&lt;/code>&lt;/pre>
&lt;p>åªè¦å¨ä¸ä¸ªå½æ°ä¸é¢æä¸&lt;/p>
&lt;pre>&lt;code>#[plugin_registrar]
&lt;/code>&lt;/pre>
&lt;p>å°±åè¯äºç¼è¯å¨ï¼ä¸é¢é£ä¸ªå½æ°ï¼æ¯è¦chaè¿ä½ èº«ä½éçï¼
ç¶åæä»¬å°±å®æäºä¸ä¸ªæç®åçç¼è¯å¨æä»¶ãæå®ç¼è¯ædylibï¼æ³¨æå¿é¡»æ¯å¨æé¾æ¥åºï¼ä¸è½ç¼è¯ærlibï¼
å¨éè¦ä½¿ç¨å®çå°æ¹åä¸&lt;/p>
&lt;pre>&lt;code>#![feature(phase)]
#[phase(plugin)] extern crate plugin;
&lt;/code>&lt;/pre>
&lt;p>å°±okå¦ï¼
äºæ¯æä»¬å®æäºä¸ä¸ªä»ä¹é½ä¸åçç¼è¯å¨æä»¶ã&lt;/p>
&lt;p>æ¥ä¸æ¥æä»¬ç»æä»¬çæä»¶æ·»å ç¹å°åè½ï¼é»æ­¢ç¼è¯ååååï¼
å¨è¿ä¸ªå°æ¹ï¼æä»¬å ä¸ä¸ªå½æ°å®ç°&lt;/p>
&lt;pre>&lt;code>impl LintPass for MyLintPass1 {
fn get_lints(&amp;amp;self) -&amp;gt; LintArray {
lint_array!(mylint)
}
fn check_crate(&amp;amp;mut self, ctx: &amp;amp;Context, crt: &amp;amp;ast::Crate) {
ctx.lint(mylint, &amp;quot;deliberate fail!&amp;quot;)
}
}
&lt;/code>&lt;/pre>
&lt;p>äºæ¯é¤éä½ å¨mainå½æ°ææ è®°#[allow(mylint)]å¦åç¼è¯å°±æ¯éä¸è¿å¦å¦å¦&lt;/p></description></item><item><title>Rust Inline ASM</title><link>https://wooya.me/post/rust-inline-asm/</link><pubDate>Wed, 04 Nov 2015 11:53:30 +0800</pubDate><guid>https://wooya.me/post/rust-inline-asm/</guid><description>&lt;p>ruståc/c++ä¸æ ·,å¯ä»¥åèæ±ç¼.è¯­æ³åc/c++çåèæ±ç¼å¤§è´ä¸æ ·.åªæå ä¸ªç»èç¨æä¸å.&lt;/p>
&lt;p>é¦å,éè¦å¼å¯ä¸ä¸ªç¹æ§ &lt;code>#![feature(asm)]&lt;/code>&lt;/p>
&lt;p>ç¶åå¨&lt;code>asm!&lt;/code>å®éé¢åæ±ç¼å³å¯.&lt;/p>
&lt;p>æ ¼å¼æ¯:&lt;/p>
&lt;pre>&lt;code>asm!(assembly template
: output operands
: input operands
: clobbers
: options
);
&lt;/code>&lt;/pre>
&lt;p>å¤§è´åc/c++ç¸å.å¶ä¸­æå ä¸ªä¸åç¹:&lt;/p>
&lt;p>å¨æåä¸æ®µç¨æ¥å£°æå·²ç»ä½¿ç¨è¿çå¯å­å¨çé£ä¸æ®µ(clobbers)ä¸é¢è¿å¯ä»¥è·ä¸æ®µoptionæ®µ.å¤éé¡¹æ:&amp;ldquo;intel&amp;quot;è¡¨ç¤ºéç¨intelæ±ç¼èä¸åcé£æ ·ç¨AT&amp;amp;Tæ±ç¼.&amp;ldquo;volatile&amp;rdquo;,åcéé¢ç&lt;code>__asm__volatile__&lt;/code>ä¸æ ·.&amp;ldquo;alignstack&amp;rdquo;,è®©ç¼è¯å¨èªå¨æå¥å¯¹é½æ çä»£ç (å ä¸ºæäºæä»¤ééè¦å¯¹é½æ ,æ¯å¦SSEæä»¤é).
å¨å¡«åæ¨¡ççæ¶å,åéç¨$0,$1æ¥è¡¨ç¤º,èä¸æ¯cç%1,%2æ¥è¡¨ç¤º.
ç«å³æ°ç¨&lt;code>$$&lt;/code>è¡¨ç¤º,&lt;code>$$1&lt;/code>å°±æ¯1.
å¯å­å¨ç´æ¥ç¨%æ¥è¡¨ç¤º,%eaxè¡¨ç¤ºeaxå¯å­å¨
æ¨¡çéé¢å¤æ¡æä»¤ç¨åå·(;)æ¥åå²,èä¸æ¯cç&amp;rdquo;\r\n&amp;quot;
å£°æclobberçæ¶åç´æ¥å&lt;code>eax&lt;/code>,ä¸ç¨åCé£æ ·å&lt;code>%eax&lt;/code>
è®°å¾&lt;code>asm!&lt;/code>çæ¶åè¦å¤é¢å¥&lt;code>unsafe&lt;/code>å
intelè¯­æ³ææ²¡æè¯è¿.æä»¥æ ä»æ¯è¾è¯­æ³åºå«:(&lt;/p>
&lt;p>ä¸é¢éä¸æçä¸ä¸ªå°ä¾å­,ç¨æ±ç¼+åç§»éæ¥è®¿é®æ°ç».&lt;/p>
&lt;pre>&lt;code class="language-rust">#![feature(asm)]
fn main() {asm();}
#[cfg(target_arch = &amp;quot;x86_64&amp;quot;)]
fn asm() {
use std::mem::transmute;
use std::rand::random;
let array: &amp;amp;[u64] = &amp;amp;[random(),random(),random(),random()];
let address = unsafe { transmute::&amp;lt;_, (i64, i64)&amp;gt;(array).0 };
for offset in 0u64..4 {
let ret: u64;
unsafe {
asm!(
r&amp;quot;
mov ($1, $2, 8), %rax;
mov %rax, $0;
&amp;quot;
: &amp;quot;=r&amp;quot;(ret)
: &amp;quot;r&amp;quot;(address), &amp;quot;r&amp;quot;(offset)
: &amp;quot;rax&amp;quot;
:
);
}
println!(&amp;quot;å¨ç¬¬{}å·ä½ä¸çåç´ æ¯{}&amp;quot;, offset, ret);
}
}
&lt;/code>&lt;/pre></description></item><item><title>Rust Enum</title><link>https://wooya.me/post/rust-enum/</link><pubDate>Wed, 04 Nov 2015 11:51:39 +0800</pubDate><guid>https://wooya.me/post/rust-enum/</guid><description>&lt;p>æ¬æéè¿è§£æ&lt;code>llvm&lt;/code>ç&lt;code>ir&lt;/code>æ¥è§£ærust &lt;code>enum&lt;/code>çåå­å¸å±ã&lt;/p>
&lt;p>rustçenumå·®ä¸å¤æ¯Cç&lt;code>enum&lt;/code>å&lt;code>union&lt;/code>ç±»åçæ··åä½ãå¯ä»¥åæ&lt;/p>
&lt;pre>&lt;code class="language-rust">enum Enum {
AEnum = 0,
BEnum = 1,
CEnum = 2,
} // ç±»ä¼¼CçEnum
&lt;/code>&lt;/pre>
&lt;p>ä¹å¯ä»¥&lt;/p>
&lt;pre>&lt;code class="language-rust"> enum Buk {
two_int(int,int),
three_uint(uint,uint,uint),
lonely_f64(f64),
} // ç±»ä¼¼union
&lt;/code>&lt;/pre>
&lt;p>çè³&lt;/p>
&lt;pre>&lt;code class="language-rust">enum LinkedListNode&amp;lt;T&amp;gt; {
DataOnly(T),
DataWithNext(T,Box&amp;lt;LinkedListNode&amp;lt;T&amp;gt;&amp;gt;),
}
&lt;/code>&lt;/pre>
&lt;p>æ»ä¹ï¼å©ç¨rustçenumï¼å¯ä»¥ä»»æçæé æ³è¦çæ½è±¡æ°æ®ç»æã
å¨å¦ä¸äºè¯­è¨ä¸­ï¼è¿ç§æ°æ®ç»æå«åADT(algebra data type, ä»£æ°æ°æ®ç±»å)ã&lt;/p>
&lt;p>===============================================&lt;/p>
&lt;ul>
&lt;li>ææ®éçenumã&lt;/li>
&lt;/ul>
&lt;p>æå¦ä¸ç»æï¼&lt;/p>
&lt;pre>&lt;code class="language-rust">enum simple {
A,B,C,D
}
&lt;/code>&lt;/pre>
&lt;p>å¨rustç¼è¯å®ä»¥åï¼å®å¨ä¸ä¼ä¸ºsimpleçæä»»ä½çæ°æ®ç»æã
&lt;code>let a = A&lt;/code> åªä¼è¢«rustç¼è¯æ &lt;code>let a: i8 = 0&lt;/code>ãåçï¼Bå°±æ¯1i8ï¼Cå°±æ¯2i8.&lt;/p>
&lt;p>åç&lt;/p>
&lt;pre>&lt;code class="language-rust">enum simple {
A = 1,
B = 2,
C = 3,
D = 4,
}
&lt;/code>&lt;/pre>
&lt;p>ä¹åªæ¯æ&lt;code>let a = 0i8&lt;/code>åæäº&lt;code>let a = 1i8&lt;/code>èå·²ã&lt;/p>
&lt;p>matchè¿æ ·ä¸ä¸ªæç®åçenumï¼rustæåçä»ä»åªæä¸ä¸ªç®åçå¯¹i8çswitchè¯­å¥ã&lt;/p>
&lt;ul>
&lt;li>union like enum&lt;/li>
&lt;/ul>
&lt;p>èèå¦ä¸enumï¼&lt;/p>
&lt;pre>&lt;code class="language-rust">enum simple {
A(i32,i64),
B(u8),
C(f32),
}
&lt;/code>&lt;/pre>
&lt;p>è¿æ¶ï¼è¿ä¸ªenumçllvmåå­è¡¨ç¤ºä¸º&lt;code>{ i8, [7 x i8], [1 x i64] }&lt;/code>ï¼ç¨rustæ¥è¡¨ç¤ºå°±æ¯&lt;code>(i8,i8,i8,i8,i8,i8,i8,i8,i64)&lt;/code>&lt;/p>
&lt;p>ä¸å±8ä¸ªi8ï¼ä¸ä¸ªi64.
å¯è½ä¼çº³é·ï¼æä¹ä¼æé£ä¹å¤i8å¢ï¼
åå å¨äºï¼åå­å¯¹é½ã&lt;/p>
&lt;p>é¦åï¼enumçæ å·è¯å®ä½äºå¤´é¨ï¼å°±æ¯ç¬¬ä¸ä¸ªi8.å æ­¤Aè¿æ¯0ï¼Bè¿æ¯1.
ä½æ¯åä¾1ä¸åçæ¯ï¼æ¬ä¾ä¸­çenumæ¯å¸¦æèªå®ä¹æ°æ®çãæä»¥å¿é¡»ä¸ºèªå®ä¹æ°æ®åéç©ºé´ã
æä»¬æ¥ç®ä¸ä¸ï¼ä¸å±éè¦1&lt;em>i8ï¼ç¨äºæ å·ï¼+1&lt;/em>i32ï¼Açç¬¬ä¸ä¸ªåï¼+1&lt;em>64ï¼Açç¬¬äºä¸ªåï¼ãBåCæä»¬å°±ä¸ç®¡äºï¼å ä¸ºå®ä»¬çå¤§å°é½å°äºAï¼å æ­¤æä»¬å¯ä»¥å¤ç¨Açåå­ç©ºé´ãæä»¥è¿æ ·ä¸ä¸ªenumè³å°éè¦104ä¸ªbitãä½æ¯ç±äºåå­å¯¹é½çåå ï¼ç¬¬ä¸ä¸ªi8è¦ååé¢çi64å¯¹é½ï¼æä»¥è¦è¡¥ä¸7ä¸ªi8ï¼å ä¸º7&lt;/em>8+8=64åã
è¡¥å®ä¹åæä»¬åç°ï¼é£ä¸ªi32ä¹å¯ä»¥è¢«ç¨æ¥è¡¥å®ç7ä¸ªi8æ¥è¡¨ç¤ºäºï¼4ä¸ªi8åä¸åå°±ä¸ä¸ªi32äºåï¼ãäºæ¯è¿ä¸ªenumå°±æ¯8ä¸ªi8+1ä¸ªi64ç»æäºã&lt;/p>
&lt;p>ç°å¨æ¥ççå½å®ä»¬åå«æ¯Aï¼Bï¼Cæ¶çæåµã
å½enumæ¯Açæ¶åï¼å®çç»æä¼è½¬æ¢æ{i8, i32,
i64}.ç¬¬ä¸ä¸ªç¨äºæ å·ï¼æ¯0.ç¬¬äºä¸ªæ¯Açç¬¬ä¸ä¸ªåï¼i32ï¼i64æ¯ç¬¬äºä¸ªåãç¨äºåå­å¯¹é½çi8è¢«llvmèªå¨èèµ·æ¥äºãå®æ´çè¡¨ç¤ºæ¯{i8,
[3 x i8], i32, i64}ï¼ä¸­é´3ä¸ªi8ä¼éèæã
å½enumæ¯Bçæ¶åï¼ç»æå°±åæäº{i8,i8}åé¢çä¸å¤§å ä¸è¥¿ç»ç»ä¸è¦ãæä»¥å¦æä¸ä¸ªenumè¦æ¯è¢«è¿æ ·æé äºï¼æ¯ä¸ä¸ªBé½ä¼æµªè´¹å¤§éçç©ºé´ï¼ç©ºé´ä½¿ç¨ç16/128=12.5%ï¼ãå¯¹äºåçæºç¼ç¨æ¥è¯´è¦å°½éé¿åè¿ç§æåµã
å½enumæ¯Cçæ¶åï¼ç»ææ¯{i8,float},[3xi8]åAï¼ä¼éèèµ·æ¥ãåé¢æµªè´¹äºä¸ä¸ªi64.å©ç¨ç50%ï¼ä¹æºä½ã&lt;/p>
&lt;ul>
&lt;li>1å2æ··æ­&lt;/li>
&lt;/ul>
&lt;p>å¦ä¸enumï¼&lt;/p>
&lt;pre>&lt;code class="language-rust">enum simple {
A(i32,i64),
B(u8),
C(f32),
D,
E
}
&lt;/code>&lt;/pre>
&lt;p>å·ä½æåµåunion enumå·®ä¸å¤ãåé¢ä¸¤ä¸ªDåEåæ{i8}ç½¢äºã&lt;/p>
&lt;ul>
&lt;li>æ³åenum&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-rust"> enum simple&amp;lt;T&amp;gt; {
Data(T),
Nil
}
let a = simple::Data::&amp;lt;int&amp;gt;(1);
let b = simple::Nil::&amp;lt;uint&amp;gt;;
&lt;/code>&lt;/pre>
&lt;p>æ³åå¶å®åªæ¯çæäºä¸¤ä»½ä»£ç ï¼ä¸ä¸ªå«&lt;code>%&amp;quot;enum.main::simple&amp;lt;[int]&amp;gt;&amp;quot; = type { i8, [7 x i8], [1 x i64] }&lt;/code>ï¼
å¦ä¸ä¸ªå«&lt;code>%&amp;quot;enum.main::simple&amp;lt;[uint]&amp;gt;&amp;quot; = type { i8, [7 x i8], [1 x i64] }&lt;/code>ï¼å¶å®æ ä»»ä½å·®å«ã&lt;/p>
&lt;ul>
&lt;li>struct variant&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-rust">enum simple {
duck {a: int, b: int},
Nil
}
let a = simple::duck{a:4,b:3};
&lt;/code>&lt;/pre>
&lt;p>åæ®éçenumä¸æ ·ï¼åªæ¯ç»duckéé¢çä¸¤ä¸ªi64èµ·ä¸ªåå­ç½¢äºãå¨irå±é¢æ²¡æä»»ä½åºå«ã&lt;/p>
&lt;ul>
&lt;li>#[repr(C)]&lt;/li>
&lt;/ul>
&lt;p>rustè¿æ¯ææenumçåå­è¡¨ç¤ºåä¸ºCé£æ ¼çã&lt;/p>
&lt;pre>&lt;code class="language-rust">#[repr(C)]
enum simple {
a(int),
b,c
}
&lt;/code>&lt;/pre>
&lt;p>è¿å¿çåºå«å¨äºï¼å¤´é¨çæ å·ååå­å¯¹é½ï¼å¨é¨ä»i8åæäºi32ï¼å³Cçintã&lt;code>{i32, [1 x i32], i64}&lt;/code>&lt;/p></description></item><item><title>Rust Object</title><link>https://wooya.me/post/rust-object/</link><pubDate>Wed, 04 Nov 2015 11:49:25 +0800</pubDate><guid>https://wooya.me/post/rust-object/</guid><description>&lt;p>rustæéå¸¸å¼ºå¤§çç±»åç³»ç»ãä»å¤©æä»¬æ¥è¯´è¯´rustçæ³åã&lt;/p>
&lt;p>rustæä¸¤ç§æ³åï¼&lt;/p>
&lt;ol>
&lt;li>
&lt;p>åºäº&lt;code>static dispatch&lt;/code>çæ³åï¼ç±»ä¼¼äºC++çæ¨¡æ¿ãå¨ç¼è¯æè¿è¡ä»£ç ç¹åï¼monomorphizationï¼ï¼ä¸ºæ¯ä¸ç§ç±»åçæä¸ä»½ä»£ç ãå¥½å¤æ¯æ§è¡æçé«ï¼ä½æ¯ä¼å¸¦æ¥é¢å¤çåä½ä»£ç ï¼ä½¿äºè¿å¶æä»¶åå¤§ï¼bloatï¼ã&lt;/p>
&lt;/li>
&lt;li>
&lt;p>åºäº&lt;code>dynamic dispatch&lt;/code>çæ³åï¼ç±»ä¼¼äºjavaågoç&lt;code>interface&lt;/code>ãå¨è¿è¡ææ¥æ¾èè¡¨ï¼vtableï¼æ¥éæ©æ§è¡çæ¹æ³ãå¥½å¤æ¯ä½¿ç¨çµæ´»ï¼ä½æ¯æ§è½è¯å®æ¯static dispatchæ¥çå·®ãæ¬ç¯çéä»ç»è¿ä¸ç§æ³åã&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr/>
&lt;ul>
&lt;li>Trait Object&lt;/li>
&lt;/ul>
&lt;p>rustç&lt;code>dynamic dispatch&lt;/code>å®ç°é½æ¯åºäºä¸ç§å«å&lt;code>trait object&lt;/code>çç±»åæ¥å®ç°çãåçä¸ä¸ªä¾å­ï¼&lt;/p>
&lt;pre>&lt;code class="language-rust"> trait Object {
fn dood(&amp;amp;self) -&amp;gt; int {
1i
}
}
impl Object for int {}
impl Object for uint {}
fn main() {
fn gimme_an_object(i: &amp;amp;Object) {
println!(&amp;quot;{}&amp;quot;, i.dood());
}
gimme_an_object(&amp;amp;2i); // OUTPUT: 1
gimme_an_object(&amp;amp;3u); // OUTPUT: 1
}
&lt;/code>&lt;/pre>
&lt;p>&lt;code>gimme_an_object&lt;/code>å½æ°è¿éåçäºä»ä¹ï¼
å¯ä»¥çå°ï¼&lt;code>gimme_an_object&lt;/code>éè¦ä¼ å¥ä¸ä¸ª&amp;amp;Objectç±»åçåæ°ãå°±æ¯è¯´ï¼&lt;code>gimme_an_object&lt;/code>å½æ°çåæ°iæ¯ä¸ä¸ªå®ç°äºObjectè¿ä¸ªtraitçå¼ç¨ç±»åãæä»¥æä»¬æ è®ºåç»å®äºä¸ä¸ª&amp;amp;intæä¸ä¸ª&amp;amp;uintï¼å®é½è½å®æè°ç¨ãå ä¸ºä¹åçä¸¤ä¸ª&lt;code>impl&lt;/code>å·²ç»ä¸º&lt;code>uint&lt;/code>ç±»åå&lt;code>int&lt;/code>ç±»åå®ç°äº&lt;code>Object&lt;/code>è¿ä¸ª&lt;code>trait&lt;/code>ã
å¨è¿ä¸ç¹ä¸ï¼rustçtraitågoçinterfaceå¾ç¸ä¼¼ãæä»¬åªéè¦ä¼ å¥ä¸ä¸ªæ¥å£ï¼å½æ°å°±è½å®æå·¥ä½ï¼ä¸ºä¸ç¨ç®¡ä¼ å¥çåæ°å°åºæ¯ä»ä¹ç±»åã
ä½æ¯è¿éæä¸ä¸ªç»èéè¦æ³¨æï¼ä¸ºä»ä¹è¦å&lt;code>&amp;amp;Object&lt;/code>ï¼åæ&lt;code>fn gimme_an_object(i: Object)&lt;/code>ä¸è¡åï¼
ç­æ¡æ¯ä¸è¡ãæäººå¯è½å¾å¥æªï¼ä¸ºä»ä¹æå¨goéé¢ç´æ¥åinterfaceå°±æ²¡é®èµ·ï¼rustéé¢å´å¿é¡»è¦å ä¸ªå¼ç¨å¢ï¼
åå æä¸¤ä¸ªï¼&lt;/p>
&lt;ol>
&lt;li>&lt;/li>
&lt;li>rustæä¸ç§åçæéï¼&amp;amp;ãBoxå*ãæ è®ºåªä¸ç§é½å¯ä»¥ä½ä¸ºtrait
objectçindirectionï¼å æ­¤è¦æ¯ç¨interfaceä¸ç»æ±æ¹ï¼ä¸åå&amp;amp;ï¼å¿ç¶å¯¼è´çµæ´»æ§ä¸éãæ è®ºç¨åªä¸ç§ä½ä¸ºtrait&lt;br>
objectçé»è®¤æéé½æå¤±åé¢ã&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>trait objectçç¼è¯å¨é­æ³ã&lt;/li>
&lt;/ul>
&lt;p>å¨rustéï¼ææçæéé½æ¯ä¸ä¸ªå­é¿ãæ¯å¦64ä½æºå¨ä¸ï¼&amp;amp;1içå¤§å°å°±æ¯64ä¸ªbitã
ä½æ¯å¨trait objectä¸­ï¼rustç¼è¯å¨ä¼éå¼çææéè½¬æ¢ä¸ºä¸ä¸ªèæéã&lt;/p>
&lt;pre>&lt;code class="language-rust"> // in core::raw::TraitObject
struct TraitObject {
data: *mut (),
vtable: *mut (),
}
&lt;/code>&lt;/pre>
&lt;p>ä¹å°±æ¯è¯´ï¼ææçTraitObjectå¤§å°å¶å®é½æ¯ä¸¤ä¸ªå­é¿ãç¬¬ä¸ä¸ªæåæ°æ®ï¼ç¬¬äºä¸ªæåèå½æ°è¡¨ãè¿ç¹ågoçinterfaceå¶å®æ¯ä¸æ¨¡ä¸æ ·çã&lt;/p>
&lt;ul>
&lt;li>trait safety&lt;/li>
&lt;/ul>
&lt;p>å¯¹äºtrait objectï¼rustè¿æä¸ä¸ªéå¶ï¼åªæsafeçtraitæè½è¢«ç¨ä½trait objectã
ä»ä¹å«safeçtraitå¢ï¼
å ä¸ºæäºtraitä¼è¿åä¸ä¸ªselfç±»åï¼æ¯å¦ï¼&lt;/p>
&lt;pre>&lt;code class="language-rust"> trait RetSelf {
fn ret_self(&amp;amp;self) -&amp;gt; Self;
}
&lt;/code>&lt;/pre>
&lt;p>å¦æimplç»äºintï¼é£ä¹ret_selfæ¹æ³çè¿åå¼å°±æ¯ä¸ä¸ªintï¼è¦æ¯implç»äºf64ï¼é£ä¹è¿åå¼å°±æ¯ä¸ä¸ªf64.è¿å°±æå³çä»£ç è¯¸å¦ï¼&lt;/p>
&lt;pre>&lt;code class="language-rust"> fn unsafe_object(i: &amp;amp;RetSelf) {
let c = i.ret_self();
}
&lt;/code>&lt;/pre>
&lt;p>æ¯æ æ³ç¼è¯çï¼å ä¸ºæ ä»ç¥écçå¤§å°ãå æ­¤å¨rustéé¢ï¼åªæä¸å¸¦æfn() -&amp;gt;
Selfç±»åçæ¹æ³çtraitæå«safeçtraitï¼åªæsafeçtraitæè½è¢«ç¨ä½trait objectãè¿ä¹æ¯ä¸ºä»ä¹rustæå¾å¤trait xxxxï¼
trait XXXXEXTãå ä¸ºXXXXæ¯safeçobjectï¼ètrait
XXXXEXTéé¢åå«äºå¸¦æè¿åSelfçæ¹æ³ãå¦ææä¸¤èåå¹¶ä¸ºåä¸ä¸ªtraitï¼æå³çtrait XXXXå°ä¸è½åç¨äºtrait
objectãå æ­¤å¿é¡»ç¨ä¸¤ä¸ªtraitæ¥å§unsafeçæ¹æ³éç¦»å¼ãæ¯å¦å¸¸ç¨çIterator
traitå°±æ¯å¦æ­¤ãå®ä»ä»¥åçä¸ä¸ªtraitåæäºå¦ä»çinteratoråiteratorExt.&lt;/p></description></item><item><title>Talk About Phantom Type</title><link>https://wooya.me/post/rust-phantom-type/</link><pubDate>Mon, 02 Nov 2015 10:36:23 +0800</pubDate><guid>https://wooya.me/post/rust-phantom-type/</guid><description>&lt;p>å¨å·æé«çº§ç±»åç³»ç»çè¯­è¨éé¢ï¼æä¸ç§ç±»åæ è®°çç¨æ³å«phantom type,
æ¯å¦&lt;a href="http://www.haskell.org/haskellwiki/Phantom_type" target="_blank" rel="noopener">Haskellè¯­è¨&lt;/a>ãè¿ç§ç¨æ³æä¸ªå¾æææç¨éï¼ç¨æ¥åç¼è¯æ¶çç±»åæ£æ¥ï¼å¹¶ä¸å¯¹äºç¼è¯åçä»£ç æ¥è¯´ï¼å®å¨æ²¡æä»»ä½çå¯ä½ç¨ã&lt;/p>
&lt;p>ä¸¾ä¸ªä¾å­ï¼å¨åå ä½è¿ç®çæ¶åï¼æä»¬ä¼ç¢°å°è¿ç®æ¶åéåä½çé®é¢ã&lt;/p>
&lt;pre>&lt;code class="language-rust">#[deriving(Show)]
struct Length&amp;lt;Num&amp;gt;(Num);
type Meter = f64;
type Inch = f64;
let a: Length&amp;lt;Meter&amp;gt; = Length(5.0 as Meter);
let b: Length&amp;lt;Inch&amp;gt; = Length(7.0 as Inch);
impl&amp;lt;Num&amp;gt; Add&amp;lt;Length&amp;lt;Num&amp;gt;,Length&amp;lt;Num&amp;gt;&amp;gt; for Length&amp;lt;Num&amp;gt; where Num: Add&amp;lt;Num,Num&amp;gt; {
fn add(self, rhs: Length&amp;lt;Num&amp;gt;) -&amp;gt; Length&amp;lt;Num&amp;gt; {
Length(self.0 + rhs.0)
}
}
println!(&amp;quot;{}&amp;quot;, a + b);
&lt;/code>&lt;/pre>
&lt;p>å¨ä¸é¢çä»£ç ä¸­ï¼æä»¬æä¸ä¸ªå¾ææ¾çbug,åä½ä¸ºç±³çaç«ç¶ååä½ä¸ºè±å¯¸çbè¿è¡äºç¸å ãè¦æ¯å¨ä¸å¡é»è¾ä¸­åºç°è¿ä¹ä¸è¬ï¼è¯å®å¾é¾debugï¼å ä¸ºä»è¯­æ³ä¸æ¥è®²ï¼å®å¨æ²¡æé®é¢åï¼&lt;/p>
&lt;p>ç°å¨æä»¬æ¥å¼å¥ä¸ç§ç±»åç³»ç»çtrickï¼å«åphantom typeã&lt;/p>
&lt;pre>&lt;code class="language-rust">mod unit {
#[deriving(Show)]
enum Meter {}
#[deriving(Show)]
enum Inch {}
}
#[deriving(Show)]
struct Length&amp;lt;Unit,Num&amp;gt;(Num);
let a: Length&amp;lt;unit::Meter,f64&amp;gt; = Length(5.0);
let b: Length&amp;lt;unit::Inch,f64&amp;gt; = Length(7.0);
impl&amp;lt;Unit,Num&amp;gt; Add&amp;lt;Length&amp;lt;Unit,Num&amp;gt;,Length&amp;lt;Unit,Num&amp;gt;&amp;gt; for Length&amp;lt;Unit,Num&amp;gt; where Num: Add&amp;lt;Num,Num&amp;gt; {
fn add(self, rhs: Length&amp;lt;Unit,Num&amp;gt;) -&amp;gt; Length&amp;lt;Unit,Num&amp;gt; {
Length(self.0 + rhs.0)
}
}
println!(&amp;quot;{}&amp;quot;, a + b);
&lt;/code>&lt;/pre>
&lt;p>ä¸ºäºæå°æ¹ä¾¿ï¼å äºä¸äº&lt;code>#[deriving(Show)]&lt;/code>ã æä»¬ç»Lengthç±»åå ä¸äºä¸ä¸ª&lt;code>Unit &lt;/code>çç±»åæ è®°ãä½æ¯ï¼Unitå´æ²¡æåºç°å¨ä»»ä½æå¼çå°æ¹ï¼å®ä»ä»æ¯ä½ä¸ºäºä¸ä¸ªç±»åæ è®°å­å¨çãæä»¥ï¼ææ³è¿ä¹æ¯ä¸ºä»ä¹å®å«&lt;code>phantom type&lt;/code>çåå å§ã&lt;/p>
&lt;p>ç¼è¯ä¸é¢é£æ®µçä»£ç ï¼ç¼è¯å¨ä¼ç»ä½ æ¥éï¼&lt;/p>
&lt;pre>&lt;code class="language-rust">error: mismatched types: expected `main::Length&amp;lt;main::unit::Meter, f64&amp;gt;`, found `main::Length&amp;lt;main::unit::Inch,
f64&amp;gt;` (expected enum main::unit::Meter,found enum main::unit::Inch)
&lt;/code>&lt;/pre>
&lt;p>ç¼è¯å¨è¯´ï¼ aæ¯&lt;code>Length&amp;lt;Meter,f64&amp;gt;&lt;/code>, bæ¯&lt;code>&amp;lt;Inchï¼f64&amp;gt;&lt;/code>,å®ä»¬ç±»åä¸ç¸å®¹ã&lt;/p>
&lt;p>ä»ä»éè¿å¢å ä¸ä¸ªé¢å¤çç±»åæ è®°ï¼æä»¬å°±å®ç°äºè®©ç¼è¯å¨èªå¨ç»æä»¬æ£æ¥åä½çæ¹æ³ï¼èä¸è¿ç§&lt;code>phantom type&lt;/code>çå°trickï¼ä¸ä¼å¸¦æ¥ä»»ä½çè¿è¡æ¶è´æãå¨ç¼è¯å®æ¯åï¼å®ä»¬å°±è¢«ä¸å¹¶çæ¦é¤äºã&lt;/p>
&lt;p>å¶å®è¿æ¯ä¸ç§å¯¹ç°å®ä¸­åä½å¶çæ¨¡æãå¹³æ¶æä»¬åçæ¶åä¸è¬å
1mï¼2mmä¹ç±»ãå¶å®å½æä»¬åä¸äº1mè¿ä¸ªæ°å­çæ¶åï¼å¶å®çæä»¬åä¸äºä¸¤ä¸ªä¸è¥¿ï¼ä½ä¸ºæ°å­ç1åä½ä¸ºåä½çmãåç¬æ¿åºæ¥ï¼å¯¹äºæ°å­1æ¥è®²ï¼ä»æ²¡æä»»ä½çæä¹ãå¯ä»¥éä¾¿å¯¹ä»å ä¸å¶å®çæ°å­ï¼å¯¹äºmæ¥è¯´ï¼å®ä»ä»æ¯ä¸ªåä½ï¼åæ ·ä¹æ²¡ææä¹ãä½æ¯1mç»åèµ·æ¥ï¼må°±ä¸º1èµäºäºclassä¿¡æ¯ï¼æ¹åäºå®çè¿ç®è§åã&lt;code>phantom type&lt;/code>å¨æ­¤ï¼å°±èµ·å°äºè¿ä¸ªéçº²ä½ç¨ã&lt;/p>
&lt;p>é¤äºç¨æ¥ä½ä¸ºæ°å­çåä½ä»¥å¤ï¼è¿æä¸ä¸ªæ¯è¾å¥½ç¨çå°æ¹æ¯ä½ä¸ºç¨æ·è¾å¥å®å¨æ§çæ è®°ï¼è¿årustçéå®å¨æ¯é¥ç¸å¼åºåï¼ã
ä¼æå¨ç¥ï¼webå®å¨æå¾å¤§ä¸é¨åé®é¢ï¼æ¯å ä¸ºæ²¡æå¯¹ç¨æ·è¾å¥åæ£æ¥ãä¸ä¸ªå®å¨çç³»ç»åºè¯¥å¯¹äºææçç¨æ·è¾å¥éåä¸ä¿¡ä»»çæåº¦ï¼åºè¯¥ç±ä»£ç å¯¹å¶è¿è¡æ£æ¥ã
ä½æ¯å¨å¼åçæ¶åï¼å¯è½ç±äºç¨åºåæ°´å¹³é®é¢ï¼æèä¸æ¶çå¿½ç­åå ï¼å¾å¾ä¼å¿è®°æ£æ¥ãè¿å°±ä¸ºç³»ç»åä¸äºå¾å¤§çéæ£ã
å©ç¨&lt;code>phantom type&lt;/code>æä»¬å¯ä»¥ä¸ºææçstringæä¸tagï¼è®©ç¼è¯å¨æ¥æ¿æä»¬è¿è¡æ£æ¥ã&lt;/p>
&lt;pre>&lt;code class="language-rust">enum Trusted {}
enum UnTrusted {}
struct UserInput&amp;lt;T&amp;gt;(String);
let a: UserInput&amp;lt;Trusted&amp;gt;(&amp;quot;safe&amp;quot;.to_string());
let b: UserInput&amp;lt;UnTrusted&amp;gt;(&amp;quot;SQL Injectiong is here!!!&amp;quot;.to_string());
insert_into_database(a);
insert_into_database(b); // ç¼è¯éä¸è¿
&lt;/code>&lt;/pre>
&lt;p>åå®æä»¬ç&lt;code>insert_into_database&lt;/code>æ¥åä¸ä¸ª&lt;code>UserInput&amp;lt;Trusted&amp;gt;&lt;/code>ä½ä¸ºè¾å¥ãé£ä¹é£ä¸ªbï¼æä»¬æ¯æ è®ºå¦ä½ä¹æ æ³å­å¥æ°æ®åºçï¼å¿é¡»è¦æä»¬è¿è¡æ¾å¼çæ£æ¥ï¼å°å¶è½¬æ¢ä¸ºUserInput&lt;Trusted>,å¦åç¼è¯å¿å®æ¥éãè¿æ ·ç³»ç»çå®å¨æ§å°±å¤§å¤§çå å¼ºäºã&lt;/p></description></item></channel></rss>